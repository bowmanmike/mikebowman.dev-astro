{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/json-fun-for-everyone/","result":{"data":{"post":{"frontmatter":{"slug":"json-fun-for-everyone","title":"JSON: Fun for Everyone!","date":"2017-12-14"},"html":"<p>Friends! Settle in, I've got a good one for you today. I want to talk to you all\nabout my favourite data-interchange format! What's that? Nobody has a favourite\ndata-interchange format? Nonsense! <!-- endexcerpt --> Everyone has one. Mine is\nJSON. Heard of it? Yeah, I thought so.</p>\n<p>It's everywhere in the web world. I'm not going to go into the details of what\nJSON is in this post, or what it stands for, or where it comes from, but if\nyou're interested in that information, check out\n<a href=\"https://www.json.org\">www.json.org</a>. What I want to talk about here is some\ntricks to handling large amounts of JSON in a sane, speedy fashion. Because\nnobody likes crashing their text editor trying to open a 400mb JSON file holding\n85,000 records with upwards of 20 fields each, because they're trying to find\nout the lowest value of one particular field. Yeah, definitely did that to\nmyself at least once. It took an embarrassingly long time until I realized that\nthere must be a better way, but once I found it, hoooo boy. Things improved, let\nme tell ya.</p>\n<p>So. Down to brass tacks. The first thing I'm gonna need to you to do, is go\nahead and download a fun little command-line program called <code class=\"language-text\">jq</code>. You can read\nabout it at <a href=\"https://stedolan.github.io/jq/\">https://stedolan.github.io/jq/</a>. If\nyou're using a Mac, you can install it with Homebrew. Otherwise, there's all\nkinds of fun instructions if you follow that link. <code class=\"language-text\">jq</code>, if you haven't heard of\nit, is a command-line JSON parser. It's written in C, and it's super powerful,\nin the right hands. In the wrong hands, well, luckily for us, it won't do much.\nAt it's most basic, it'll take a single-line JSON string and pretty-print it for\nyou.</p>\n<p>This:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"occupation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"likesPizza\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Turns into this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"occupation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"likesPizza\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Not a huge deal when you're dealing with such a short string, but the real power\ncomes out when you start operating on a bigger dataset.</p>\n<p>Take, for example, the aforementioned 400mb, 85,000 record JSON file. Try\nopening that in any text editor and you'll have a bad time. Even worse, try\nsearching for a particular value within that text editor. It's trouble. Trust\nme, I've tried. This is where <code class=\"language-text\">jq</code> really shines. Let's say that you want to\npull out the most recent timestamp from a record in that file. Print the file\nwith <code class=\"language-text\">cat</code>, pipe the output to <code class=\"language-text\">jq</code>, and provide a complex-looking set of\narguments. Ta-Da! You've got the value. The full command looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/path/to/file.json <span class=\"token operator\">|</span> jq <span class=\"token string\">'[.[].\"timestamp\" | strptime(\"%m/%d/%Y\") | todate] | sort | last'</span></code></pre></div>\n<p>Without going into too much detail, the arguments passed to <code class=\"language-text\">jq</code> allow you to\naccess particular fields on each object, parse them to a standard timestamp\nformat, sort them, and take the last. Operating on the 400mb file, it takes\nabout a second to run that command. Pretty impressive, if you ask me.</p>\n<p>Another recent use case I found is to return records that match a particular\nfilter. Say you want to pull all records matching a particular name.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/path/to/file.json <span class=\"token operator\">|</span> jq <span class=\"token string\">'.[] | select(.name == \"mike\")'</span></code></pre></div>\n<p>Pretty neat huh?</p>\n<h4 id=\"other-fun-jq-stuff-as-some-of-you-may-know-im-a-fan-of-vim-well\" style=\"position:relative;\"><a href=\"#other-fun-jq-stuff-as-some-of-you-may-know-im-a-fan-of-vim-well\" aria-label=\"other fun jq stuff as some of you may know im a fan of vim well permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Fun JQ Stuff As some of you may know, I'm a fan of Vim (well,</h4>\n<p>specifically Neovim) for the vast majority of my code editing needs. Vim\nintegrates super well with command line tooling like <code class=\"language-text\">jq</code>, so I've got a few\nuseful little custom vim functions to manipulate JSON in a sane way. I like to\nhave the ability to minify or prettify my JSON files as I'm workin, and in Vim,\ninvoking <code class=\"language-text\">jq</code> from within the editor is dead easy. I've got two short VimScript\nfunctions that I've mapped to easy shortcuts.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">function</span> <span class=\"token function\">PrettyPrintJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token operator\">!</span>jq <span class=\"token string\">'.'</span> <span class=\"token operator\">-</span>M\n<span class=\"token keyword\">endfunction</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">!</span> <span class=\"token function\">MinifyJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token operator\">!</span>jq <span class=\"token string\">'.'</span> <span class=\"token operator\">-</span>cM\n<span class=\"token keyword\">endfunction</span></code></pre></div>\n<p>I know I'm not the only person to do this, and I think I found\n<a href=\"https://pascalprecht.github.io/2014/07/10/pretty-print-json-in-vim/\">this</a>\npost, which I used as inspiration for my functions, but feel free to shamelessly\ncopy these and make them your own.</p>\n<p>That's all I've got for the moment! Happy data-interchanging!</p>\n<h4 id=\"related-links\" style=\"position:relative;\"><a href=\"#related-links\" aria-label=\"related links permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Links</h4>\n<ul>\n<li><a href=\"https://stedolan.github.io/jq\">jq documentation</a></li>\n<li><a href=\"https://json.org\">JSON specification</a></li>\n<li><a href=\"https://github.com/bowmanmike/dotfiles/blob/master/.vimrc\">My vim config</a></li>\n</ul>"}},"pageContext":{"slug":"json-fun-for-everyone","prevPost":{"slug":"https-for-everyone","title":"HTTPS For everyone!"},"nextPost":{"slug":"putting-up-my-shingle","title":"Putting Up My Shingle"},"title":"JSON: Fun for Everyone!"}},"staticQueryHashes":["2310292891","63159454"]}