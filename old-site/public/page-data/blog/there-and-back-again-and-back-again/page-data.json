{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/there-and-back-again-and-back-again/","result":{"data":{"post":{"frontmatter":{"slug":"there-and-back-again-and-back-again","title":"There and Back Again and Back Again and Back Again and Ba...","date":"2022-10-21"},"html":"<p>In an office in a city there lived a programmer. Sitting at his desk, (or\nstanding, thanks to his adjustable desk), noice-cancelling headphones in place,\ntyping away on his fancy keyboard with RGB backlights, happily immersed in\nNeovim. Err, wait. That's not right. Happily immersed in Visual Studio Code.\nAhh, not quite. Happily immersed in Neovim. Dang. Doesn't feel right. Ok, last\ntry. Unhappily immersed in whichever text editor he'd happened to decide on for\nthat week.</p>\n<p>Does this sound familiar? I surely can't be the only one out there who just\ncan't seem to settle on a text editor. It feels silly, I feel like I'm spending\nway too much mental energy on something so... boring? bland? uninteresting?\nunproductive? all of the above? Who knows. But since I'm probably not the only\nperson to have felt this way, I've decided to share my experience a little, and\nhopefully shed some light on the value of things being <em>good enough</em>.</p>\n<p>In the beginning, I used Atom. It was what they suggested us to use when I was\nat my bootcamp. It was neat. It had cool colourschemes, and convenient keyboard\nshortcuts. No problems there. Until one day I decided to take a look at the\nmystical terminal-based text editor, Vim.</p>\n<p>Vim was a bit of a crazy experience. My first encounter with Vim in the wild\nwas when I was first learning about Git and typed <code class=\"language-text\">git commit</code> in the terminal.\nI found myself in a screen I couldn't exit. Like so many others, I ended up\njust closing the terminal, before I was able to figure out that I was inside a\nprogram called Vim. Then, again, like so many others, I googled \"How to exit\nVim?\", and was led to <a href=\"https://stackoverflow.com/questions/11828270/how-do-i-exit-vim\">one of the most popular Stack Overflow posts of all\ntime</a>. This\nisn't a post about why vim and modal editing is undisputably the best way to\nedit text, so I won't go into detail. But suffice to say, once I figured out\nhow to quit, I was in it. I loved it. I felt so fast, so slick, so cool. Flying\naround the document without using a mouse, coding at the speed of thought -- it\nwas awesome. I was hooked.</p>\n<p>Ok, it wasn't quite such smooth sailing. Vim is pretty barebones by default, so\nit didn't take long for me to fall down the rabbit hole of plugins and\npersonalized configuration. While I forget the precise details, at some point I\nwas pointed towards Neovim, a community-driven fork of the original Vim\ncodebase. It promised async plugin execution, faster and more community-driven\nfeature development, but an otherwise Vim-equivalent experience.</p>\n<p>So once again, I hopped over. I swapped out my old single-threaded plugins for\nnew, fancy, Neovim-only plugins. I loved it. I had asynchronous linting and\nformatting of my code, I had a keyboard shortcut to run the test under my\ncursor, I could fuzzy-find files in a snap, and even live-grep the entire\ncodebase without even thinking about it. Once again, I loved it.</p>\n<p>As Neovim matured, so did my configuration. Eventually, Neovim introduced Lua\nas a configuration language, supplementing the somewhat esoteric Vimscript it\nhad been using before. This was a big jump. Plugins could be written in a nicer\nlanguage, so plugins got better! Then Neovim added built-in support for the\nLanguage Server Protocol, and other awesome pieces like Treesitter. Between\nthese two features, we were assured, you'll have complete support for <em>any</em>\nprogramming language you choose! It'll be perfect!</p>\n<p>Of course, these promises were <em>slightly</em> too good to be true. While you could\ncertainly get Neovim configured with deep language integrations for just about\nanything, doing so took a lot of work. Getting LSP config files set up,\ninstalling, managing, and configuring external tools to do your formatting and\nlinting, plugins with overlapping functionality -- all this made it a bit of a\npain. While I was able to get things <em>mostly</em> working, my setup always felt\nsomewhat janky, and I often didn't <em>really</em> know how things were wired up under\nthe hood.</p>\n<p>The attentive reader may have noticed at this point that I've only spoken about\n(Neo)Vim, as if that is the only editor I've used all these years, since I gave\nup on Atom. As the title of this article may indicate, that isn't quite the\ncase. At some point during this journey, Microsoft released Visual Studio Code,\nwhich was a pretty direct competitor to Atom, and other desktop text editors.\nVSCode promised speed, extensibility, customizability, deep integrations with\nJavascript and Typescript (another Microsoft invention), and more. As often\nhappens with things like this, I was tempted by the new shiny toy. So I\ndownloaded it, gave it a go. It worked well, it was clean and felt snappy. It\nhad a Vim mode plugin, which is a hard requirement for me. I liked it, and I\nliked that you could configure it by clicking options in a settings menu, and\nyou could add plugins by searching a marketplace. That level of smoothness and\nease was refreshing, coming from Vim.</p>\n<p>And so now I had two great options on my hands. My custom, hacked-together,\nmostly-working Neovim setup, which I'd spent a lot of time customizing, setting\nup keyboard shortcuts, getting the colourscheme just the way I liked, all that\nkind of stuff. And on the other hand, VSCode, which was shiny and polished and\nseemed a bit easier to get up and running.</p>\n<p>So what did I do? I flip flopped, relentlessly. I'd spend a week in one editor,\na month in the other, an afternoon back in the first, three days in the other,\nthen back to the first for six months. It got to be a bit silly. I was so\nindecisive. I liked them both, but just couldn't land on one over the other.</p>\n<p>And so, for the majority of the past ~2 years, I told myself, just stick with\nNeovim, make it yours, make it work, and don't let yourself get distracted. And\nI did, and it worked! Mostly. Things kept breaking, mostly related to external\ntools. I couldn't get Prettier to run on my Javascript codebases, or the Ruby\nlangauge server wouldn't start up properly. I tried a few out-of-the-box Vim\nconfigurations (LunarVim, NvChad), but those were just too different from my\nown setup, that I eventually gave up on them. Not to mention that they had\nsimilar problems to my personalized setup as well.</p>\n<p>And so, finally, I decided. Let's go back to VSCode. Let's stick with it for a\nwhile, and see where we land. Turns out VSCode has a Neovim plugin, which lets\nyou configure your editor with a Vim config file, and even lets you use Vim\nplugins. I've got things configured mostly the way I like them. Prettier\n<em>just works</em> when I'm in a javascript file. Tweaking config options doesn't\nrequired googling <em>\"how to do X in vim\"</em>. It's clean and polished, and\nrelatively snappy. I'm still missing a few keybinds I used to have, and I\nstill prefer using iTerm instead of the VSCode built-in terminal. I miss\n<code class=\"language-text\">vim-fugitive</code> and <code class=\"language-text\">vim-test</code> in particular, but VSCode has decent\nreplacements for both.</p>\n<p>So here we are. My roundabout journey to VSCode. I'm committing myself to stick\nhere for a while at least, to really give it a go. Part of the problem with\nNeovim was that I was so into the idea of customizing my workspace that I'd\noften find myself spending more time tweaking my config than actually working.\nVSCode hasn't allowed me that kind of customizability yet, so I think that's a\nwin. And here's the crux of the matter. A text editor is a tool. Yes, your\ntools need to be comfortable, they need to work well. But the more important\nthing is <em>what you do with that tool</em>, and for me, VSCode is good enough to let\nme be productive and happy. I'd been on a search for the perfect text editor,\nwhen what I really needed was one that was <em>good enough</em> for me to get my work\ndone. Don't let perfect be the enemy of good, as they always say, whoever they\nare. I'm customizing VSCode, sure. But I'm not spending anywhere near the time\nI was customizing Vim. Find something that works, make it comfortable for you,\nbut focus on what that tool lets do you, rather than the tool itself.</p>\n<p>At least, that's what works for me.</p>\n<p>If you've read this far, thank you for taking the time to listen to this rant!\nAnd now, off to check out the new shiny toy, <a href=\"https://zed.dev\">Zed</a>!</p>"}},"pageContext":{"slug":"there-and-back-again-and-back-again","prevPost":{"slug":"simple-feature-flags-in-ruby","title":"Simple Feature Flags in Ruby"},"title":"There and Back Again and Back Again and Back Again and Ba..."}},"staticQueryHashes":["2310292891","63159454"]}