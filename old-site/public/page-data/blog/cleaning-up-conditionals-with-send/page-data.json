{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cleaning-up-conditionals-with-send/","result":{"data":{"post":{"frontmatter":{"slug":"cleaning-up-conditionals-with-send","title":"Cleaning Up Conditionals with Send","date":"2017-03-06"},"html":"<p>Well well well, here we are. In the words of a song my friend wrote for our band\nin high school, \"It's been so long, but now we're back.\" Lyrical genius, I say.\nAnyways, it's been quite a while since I posted, but I thought I might try and\nresurrect this blog a little with some slightly more technical content. I've\nbeen programming pretty much every day for over a year now, and I feel like I've\ndone some kinda cool things. Lets dive in!</p>\n<p>So I wanna talk a bit about something cool I learned at work a few months back.\nI'd been working with large, somewhat irregular JSON files, and had to parse\ncertain values out of the data. The fields would come in different forms,\nsometimes a string, sometimes an array, sometimes a hash. My first attempt at\nsolving the issue looked something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">if</span> input<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n  call_string_method<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elsif</span> input<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">)</span>\n  call_array_method<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elsif</span> input<span class=\"token punctuation\">.</span>is_a<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Hash</span><span class=\"token punctuation\">)</span>\n  call_hash_method<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It gets the job done, and to my novice programming brain, it was the proper way\nto do it. But what happens when you decide in the future that you need to handle\na <code class=\"language-text\">Float</code> differently from an <code class=\"language-text\">Integer</code>? Or that you want to add custom objects\nto the tree? You can add as many <code class=\"language-text\">elsif</code> lines to an if statement as you want,\nbut it's ugly and hard to reason about. My boss showed me this cool way of\nhandling this kind of issue, which has been a standard in my toolbox ever since\nthat day.</p>\n<p>First, we define the handler methods we'd need anyways.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_string</span></span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># do stuff</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_array</span></span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># do stuff</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">handle_hash</span></span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># do stuff</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Then, we find the class of the <code class=\"language-text\">input</code>, and using a clever combination of the\n<code class=\"language-text\">Object#send</code> method and string interpolation, we call the method dynamically,\nlike this.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">input_klass <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>to_s<span class=\"token punctuation\">.</span>downcase\nsend<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"handle_</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">input_klass</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Isn't that much cleaner? We get the string value of the class of <code class=\"language-text\">input</code>, and\ncall the <code class=\"language-text\">send</code> method with a string with some interpolation as the first\nargument, and our <code class=\"language-text\">input</code> object as the second argument.</p>\n<p><code class=\"language-text\">send</code> is a cool little method, defined on the <code class=\"language-text\">Object</code> class, which is the\nparent of just about every Ruby class. Basically, it identified a method by it's\nname as a string, and calls it with whatever arguments are passed along. This\nallows you to call methods using string interpolation to call one or the other,\nrather than using a complicated set of <code class=\"language-text\">if-else</code> blocks to make that decision.\nThe documentation is\n<a href=\"http://ruby-doc.org/core-2.4.0/Object.html#method-i-send\">here</a> if you want to\nread more.</p>\n<p>That's about all I got for now, but thanks for reading, and I hope someone out\nthere finds this useful!</p>"}},"pageContext":{"slug":"cleaning-up-conditionals-with-send","prevPost":{"slug":"keep-on-truckin","title":"Keep on Truckin'"},"nextPost":{"slug":"https-for-everyone","title":"HTTPS For everyone!"},"title":"Cleaning Up Conditionals with Send"}},"staticQueryHashes":["2310292891","63159454"]}