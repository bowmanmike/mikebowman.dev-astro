{
  "componentChunkName": "component---src-templates-blog-post-js",
  "path": "/blog/intro-to-git",
  "result": {
    "data": {
      "post": {
        "frontmatter": {
          "slug": "intro-to-git",
          "title": "Intro to Git",
          "date": "2016-04-14"
        },
        "html": "<p>Ok, so here's what's up. Github is a website where you can manage git\nrepositories. Git is software that allows you to track changes to your code, and\nis super helpful for people working together on a project. Git and github are\nseparate things, but most people use them together. It's called Version Control,\nwhich is a term I'd never heard before, and there's options other than git (SVN\nand Mercurial, I think they're called). Git seems to be the most widely used\nthough, at least in my experience.</p>\n<p>Just a quick note, I'll link to a bunch of sweet resources at the bottom of the\npost, so if you don't wanna read this whole monster of a post, just check out\nthe links at the bottom. I promise they're helpful.</p>\n<p>First off, if you aren't comfortable using the command line to navigate your\ncomputer, I'd suggest learning how to do it. There's a graphical interface\navailable for git, but most people use the command line. Plus you get to feel\nlike a hacker. If you haven't used it much before, check out this tutorial: <a href=\"http://cli.learncodethehardway.org/book/\">CLI\nCrash Course</a>. Follow the tutorial\nthere. It's not super long, and honestly, I don't use most of what he teaches,\nbut it was a great start. You should get comfortable moving through your\ndirectories (folders), and using the command line interface to create, move, or\ndelete files. Git integrates really well with this.</p>\n<p>Every project is stored in what's called a repository (repo). It's important to\nremember that the repository that lives on your computer is not the same as the\nrepository that lives on Github. You have to manually sync them up, but it's\nsimple to manage, once you figure it out. Github works by keeping the \"official\"\nversion of your code on its own servers, leaving you free to mess around without\nworrying about breaking your production code. As you write code, you'll\n<code class=\"language-text\">commit</code> your changes on your local repository, and then <code class=\"language-text\">push</code> them to\nthe remote repository when you're finished. Generally you don't need to be\npushing your code every time you commit. Generally, I push at the end of the\nday, when I finish a particular feature/thing I'd been working on, or when\nsomeone I'm collaborating with needs to see the code I've written. The opposite\nof push, naturally, is <code class=\"language-text\">pull</code>. Pulling means asking the remote repo for the\nmost recent version of the \"official\" code, and adding it to your local repo.</p>\n<p>So how do you actually do all this? The first step, if you haven't done it\nalready, is to create an account on <a href=\"https://github.com\">github.com</a>. It's free,\nunless you want to pay, and you should do it. Then, navigate to the directory\nfor a project that you want to put online. From the main directory of that\nproject, in your command line, type <code class=\"language-text\">git init</code>. This creates a new git repo\nin the current directory. You can see it worked by checking to see if there's a\ndirectory within your current directory called <em>.git</em>. It's a hidden directory\nso you might need to do some snooping to actually see if it's there, but if you\ndid the command line crash course linked above, you'll know what to do.</p>\n<p>So now you've got an empty git repo in your project directory. You want to make\na first commit. Simple enough. It's a good idea first to type <code class=\"language-text\">git status</code>.\nThis command will show you all the status (duh) of your repo. It generally lists\nfiles that it either doesn't know about, or that have changed since you last\ncommitted. If git doesn't know about the files, or they've changed since the\nlast commit, they'll be listed in red. If git's tracking the files already, but\nthey've changed, it'll be in green. Next, type <code class=\"language-text\">git add .</code>. Yes, including\nthe period. This tells git to start tracking all the files in the directory. If\nyou want to track specific files only, you can type <code class=\"language-text\">git add &lt;filename></code>,\nit'll select the files you tell it.</p>\n<p>The next step is to commit those changes. Commit is kinda like saving, if that\nmakes things clearer. So, you've done some work, added the files to git, and now\nyou want to commit them. Any guesses how it's done? If you guessed <code class=\"language-text\">git\ncommit</code>, you'd be right. Well, mostly right. A commit needs a commit message.\nSo the full command, as you'll usually write it, is <code class=\"language-text\">git commit -m &lt;enter a\nmessage here></code>. If you forget to enter a commit message, you might end up in a\nscary black screen with some writing on it, that doesn't seem to respond to\nanything you do. This is a text editor called <em>vim</em>. It's pretty intense, and I\nwon't talk about it here, but you should do some looking if you're curious. The\nfun thing about vim is that exiting the program is actually not at all intuitive\nif you've never done it before. To exit, press <code class=\"language-text\">ESC</code>, then type <code class=\"language-text\">:wq</code>.\nEscape makes sure you're in the right mode to quit, and <code class=\"language-text\">:wq</code> saves changes\nto the file and exits vim. If you make sure to remember to enter commit\nmessages, you won't have to worry about it!</p>\n<p>A quick note about commit messages. They should be short, concise, and\ninformative. As I learned it, they should be a sentence, maybe two, and\ngenerally in the imperative mood, present tense. You want your messages to\nclearly convey what happened in that commit. \"Fixed stuff\", then, is a terrible\nmessage. It gives exactly 0 insight into what's happened, and is therefore\nentirely unhelpful to your fellow devs. \"Add CSS transitions to navbar\" is a\nmuch better message. Short, clear, easy to understand. There's no hard and fast\nrule about commit messages, but if you keep good habits, you'll make other\npeople around you happy.</p>\n<p>If your commit messages are short and to the point, it makes sense that you\nshould be committing often. Generally, you want each commit to refer to one\nchange to the code. So try to get into the habit of committing often. If nothing\nelse, it'll make your Github look good!</p>\n<p>Finally, we're done working for the day, and so we're ready to push our code to\nthe remote repo. If you've sensed the pattern by now, you'll guess that the\ncommand is <code class=\"language-text\">git push</code>, or more fully, <code class=\"language-text\">git push origin master</code>. Don't\nworry too much for now about what <code class=\"language-text\">origin</code> and <code class=\"language-text\">master</code> are, but they'll\nbe important for more advanced git stuff. Basically, <code class=\"language-text\">origin</code> refers to a\nparticular remote repo, and <code class=\"language-text\">master</code> means you're pushing to the main\nbranch, which is something I'll try and cover later on. You may have to enter\nyour github name and password, which will determine whether you have access to\nthat particular repo, and it'll push your local commits to the github repo.</p>\n<p>Seems easy right? No? Well yeah, it's a bit weird at first. But trust me, once\nyou get used to it, it becomes natural and you'll understand why it's so useful\nto commit frequently and to write good commit messages.</p>\n<p>Here's a short version of the workflow, great if you've got completed projects\nyou want to showcase on github.</p>\n<ol>\n<li>Create an account on github, and link it to your computer. Follow the Github\nSetup Guide linked below, it'll tell you all about HTTPS and SSH and stuff\nthat I'm not gonna talk about.</li>\n<li>Navigate to the root directory of your project using the command line, and\ntype <code class=\"language-text\">git init</code>.</li>\n<li>Begin tracking the entire project with git, using <code class=\"language-text\">git add .</code>.</li>\n<li>Commit the project in it's current state with <code class=\"language-text\">git commit -m &lt;message></code>.</li>\n<li>Push the project to Github with <code class=\"language-text\">git push origin master</code>.</li>\n<li>Revel in your github skills as the job offers pour in!</li>\n</ol>\n<p><strong>Links</strong></p>\n<ul>\n<li><a href=\"http://cli.learncodethehardway.org/book/\">CLI Crash Course</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/what-is-version-control\">Atlassian Git\nArticles</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/what-is-version-control\">Github Setup\nGuide</a></li>\n<li><a href=\"https://github.com/bowmanmike\">My Personal Github Page</a></li>\n</ul>"
      }
    },
    "pageContext": {
      "slug": "intro-to-git",
      "prevPost": { "slug": "the-end-of-an-era", "title": "The End of an Era" },
      "nextPost": { "slug": "keep-on-truckin", "title": "Keep on Truckin'" }
    }
  },
  "staticQueryHashes": []
}
