{
  "componentChunkName": "component---src-templates-blog-post-js",
  "path": "/blog/simple-feature-flags-in-ruby/",
  "result": {
    "data": {
      "post": {
        "frontmatter": {
          "slug": "simple-feature-flags-in-ruby",
          "title": "Simple Feature Flags in Ruby",
          "date": "2022-09-01"
        },
        "html": "<p>Deploying new code to production can be nerve-wracking. Things can break,\nunexpected behaviours can show up, all kinds of things can go sideways. It’s\nextremely important to be able to quickly revert changes, in the case that\nthings go wrong unexpectedly. There are a bunch of different ways to approach\nthis, but here I’ll be talking about Feature Flags.</p>\n<!-- endexcerpt -->\n<p><strong>NOTE</strong> There is some preamble here before we get to the code snippets. If\nyou'd like to skip directly to the full code, <a href=\"#full-code\">click here</a>, or\nscroll to the bottom!</p>\n<p>First, what’s a feature flag? I’m sure there’s a proper technical definition,\nbut as far as I’m concerned, a feature flag (sometimes called a feature toggle),\nis a mechanism to enable or disable features <em>on the fly</em> without deploying\nanything new or changing any code. Ideally, you should be able to enable or\ndisable a feature instantaneously. Depending on the particular implementation,\nit may not be <em>quite</em> that fast, but within seconds-to-minutes, rather than\nminutes-to-hours.</p>\n<p>Another important use-case for feature flags is to regulate which of your users\nhave access to a particular feature. This can be useful for things like\nbeta-testing a new integration, A/B testing a new layout, or slowly opening the\nfloodgates to ensure that a new code path can hold up to production traffic.</p>\n<p>Now, you may be thinking, isn’t this a solved problem? Aren’t there like, a\nmillion, libraries in every language that will implement this for you? And to\nthat I say, yes, yes there are. Some very smart people have thought about this\nproblem, and put good work into solving it. Libraries like\n<a href=\"https://github.com/jnunemaker/flipper\">Flipper</a> for Ruby, <a href=\"https://github.com/tompave/fun_with_flags\">Fun With\nFlags</a> for Elixir, and even full-on\nSAAS products like <a href=\"https://launchdarkly.com/\">LaunchDarkly</a> can help you\nimplement sophisticated, robust feature flags for your application. But! As we\nall know, sometimes, adding a library or integrating with a full-on external\nprovider is WAY overkill for your needs. And that's why we're here today.</p>\n<p>In my experience, the simplest way to manage feature flags in a\nsmall-to-medium-sized application, especially with a small (or one-person) dev\nteam, is to use environment variables. Check if the variable is enabled, and use\nthat to determine whether or not to show the feature. Simple enough. However,\nthis barebones approach quickly runs into some limitations. What if, for\nexample, you need to check for the variable in multiple places? What if you need\nto send the feature flag status to a client-side application? What if a flag has\nmore complex states than just <code class=\"language-text\">on</code> and <code class=\"language-text\">off</code>?</p>\n<p>When I came across this problem, I decided to put together a <em>slightly</em> more\nsophisticated system to streamline the process of checking the status of a flag,\nand for distributing that knowledge throughtout an application.</p>\n<p>At it’s core, my solution involved a class for each flag. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NewLayoutFeatureFlag</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">value</span></span>\n      <span class=\"token constant\">ENV</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"NEW_LAYOUT_ENABLED\"</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">parse</span></span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"true\"</span></span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\",\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:to_i</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> value<span class=\"token operator\">&amp;.</span>match<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token regex-literal\"><span class=\"token regex\">/[0-9,]+/</span></span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">enabled_for_user</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n      parsed <span class=\"token operator\">=</span> parse\n      <span class=\"token keyword\">return</span> parsed <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span>\n\n      parsed<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>In my use-case, I had a flag that could be in one of 3 states: <code class=\"language-text\">on</code>, <code class=\"language-text\">off</code>, or\nenabled for a subset of users, identified by ID, which looks like this:\n<code class=\"language-text\">2,23,432</code> -- a comma-separated list of IDs for which to enable the flag. In\nthis particular case, the flag is stored in an environment variable, but that is\ncertainly not a requirement of this method.</p>\n<p>For me, the key to this approach is the simplicity of it’s interface. Wherever I\nam in my application, I can call <code class=\"language-text\">NewLayoutFeatureFlag.enabled_for_user?</code> with\nthe user ID, and get back whether or not the flag is enabled for that user. The\nFlag itself knows <em>how</em> to check whether a particular user should be able to use\na feature. This interface allows the flag code to be as simple or as complex as\nit needs to be. It could do a DB lookup, it could store the state in Redis, or\nperform some work to determine whether or not the flag should be enabled.</p>\n<p>Having a simple interface like this allows you to use the flag in some really\nnice patterns. Need to enforce the flag in a controller action? No problem,\nstick it in a <code class=\"language-text\">before_action</code> call, like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FooController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  before_action <span class=\"token symbol\">:check_new_layout_feature_flag</span>\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">check_new_layout_feature_flag</span></span>\n    <span class=\"token keyword\">unless</span> NewLayoutFeatureFlag<span class=\"token punctuation\">.</span>enabled_for_user<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n      render json<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token symbol\">errors</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"This feature is not enabled for this account\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token symbol\">status</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:unprocessable_entity</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Need to share the state of the flags with other clients via an HTTP call?\nSimple. Something like this is a quick solution.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FeatureFlagsController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  before_action <span class=\"token symbol\">:set_user</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n    flag_klass <span class=\"token operator\">=</span> flags<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:flag</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n    render json<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:flag</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>flag_klass<span class=\"token operator\">&amp;.</span>enabled_for_user<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">status</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:ok</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">flags</span></span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string-literal\"><span class=\"token string\">\"new_layout_enabled\"</span></span> <span class=\"token operator\">=></span> NewLayoutFeatureFlag<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># and in config/routes.rb</span>\n\nget <span class=\"token string-literal\"><span class=\"token string\">\"/feature_flags/:flag\"</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"feature_flags#show\"</span></span></code></pre></div>\n<p>This kind of architecture makes it simple to add new flags. You could even add a\n<code class=\"language-text\">FeatureFlagsController#index</code> action to return the status of <em>all</em> the flags\nfor a current user.</p>\n<p>Another important feature of this feature flag design is that the default\nposition of all the flags is <code class=\"language-text\">off</code>. I don't want any functionality to sneak\nthrough the feature flags. If a user passes bad data, if something goes wrong\ninternally, I want the feature turned off. Of course, that logic may change\ndepending on the use case. But again, that speaks to the flexibility of this\napproach. You could even integrate this inteface with a third-party like\nLaunchDarkly or Flipper, if you decided you need to have a mix of in-house and\nexternally-managed feature flags.</p>\n<p>While I’m sure this solution doesn’t cover all possible feature flag use-cases,\nI’ve found it’s a solid solution for my needs. It’s structured enough that I\ndon’t need to think any further about how to check the status of a flag, but\nit’s flexible enough to allow me to use different types of flags for different\nuse cases.</p>\n<p>To wrap up, I’d like to thank YOU, the reader, for making it this far! It’s a\nbit more text than I’d envisioned, but I hope it has some value. If you loved\nthe article, or hated it, or have any tips or corrections, please reach out to\nme at <a href=\"mailto:mike@mikebowman.dev\">mike@mikebowman.dev</a>! I’m also a freelance developer with lots of\nexperience in Rails, Elixir/Phoenix, and React! If you like my work and could\nuse some extra hands on your project, please don’t hesitate to reach out! I’m\nalways open to new connections!</p>\n<h4 id=\"full-code\" style=\"position:relative;\"><a href=\"#full-code\" aria-label=\"full code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Full Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># flag implementation</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NewLayoutFeatureFlag</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">value</span></span>\n      <span class=\"token constant\">ENV</span><span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"NEW_LAYOUT_ENABLED\"</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">parse</span></span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">==</span> <span class=\"token string-literal\"><span class=\"token string\">\"true\"</span></span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\",\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token symbol\">:to_i</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> value<span class=\"token operator\">&amp;.</span>match<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token regex-literal\"><span class=\"token regex\">/[0-9,]+/</span></span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">enabled_for_user</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n      parsed <span class=\"token operator\">=</span> parse\n      <span class=\"token keyword\">return</span> parsed <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span>\n\n      parsed<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># controller</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FeatureFlagsController</span> <span class=\"token operator\">&lt;</span> ApplicationController\n  before_action <span class=\"token symbol\">:set_user</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n    flag_klass <span class=\"token operator\">=</span> flags<span class=\"token punctuation\">[</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:flag</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n    render json<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:flag</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>flag_klass<span class=\"token operator\">&amp;.</span>enabled_for_user<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@user</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">status</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:ok</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">private</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">flags</span></span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string-literal\"><span class=\"token string\">\"new_layout_enabled\"</span></span> <span class=\"token operator\">=></span> NewLayoutFeatureFlag\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">set_user</span></span>\n    <span class=\"token comment\"># set user from params, session, etc.</span>\n    <span class=\"token variable\">@user</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># config/routes.rb</span>\nget <span class=\"token string-literal\"><span class=\"token string\">\"/feature_flags/:flag\"</span></span> <span class=\"token operator\">=></span> <span class=\"token string-literal\"><span class=\"token string\">\"feature_flags#show\"</span></span></code></pre></div>"
      }
    },
    "pageContext": {
      "slug": "simple-feature-flags-in-ruby",
      "prevPost": { "slug": "are-we-there-yet", "title": "Are We There Yet?" },
      "nextPost": {
        "slug": "there-and-back-again-and-back-again",
        "title": "There and Back Again and Back Again and Back Again and Ba..."
      },
      "title": "Simple Feature Flags in Ruby"
    }
  },
  "staticQueryHashes": ["2310292891", "63159454"]
}
